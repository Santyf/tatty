{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Headline/Headline.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","onClick","herosClicked","id","alt","src","image","Headline","Score","message","score","topScore","App","state","heros","herosChosen","includes","setState","push","length","i","j","Math","floor","random","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8mDAmBeA,MAhBf,SAAiBC,GACb,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,gBAAgBC,QAAS,kBAAMF,EAAMG,aAAaH,EAAMI,MACnE,yBAAKH,UAAY,UAAUI,IAAKL,EAAMI,GAAIE,IAAKN,EAAMO,W,MCOtDC,MAZf,WACI,OAEQ,yBAAKP,UAAY,aACb,wBAAIA,UAAU,cAAd,gC,aCWDQ,MAbf,SAAeT,GACX,OACI,6BACI,yBAAKC,UAAU,OACX,wBAAIA,UAAU,gBAAd,eACA,wBAAIA,UAAU,gBAAd,IAA+BD,EAAMU,QAArC,KACA,wBAAIT,UAAU,gBAAd,UAAqCD,EAAMW,MAA3C,iBAAgEX,EAAMY,aCiFvEC,G,iNAlFbC,MAAQ,CACNC,QACAJ,MAAO,EACPC,SAAU,GACVI,YAAa,GACbN,QAAS,wB,EAKXP,aAAe,SAAAC,GACb,IAAIY,EAAc,EAAKF,MAAME,YAC7B,GAAIA,EAAYC,SAASb,GACzB,EAAKc,SAAS,CACZF,YAAa,GACbL,MAAO,EACPD,QAAS,uCAQb,GAFAM,EAAYG,KAAKf,GAEU,KAAvBY,EAAYI,OAAhB,CASA,EAAKF,SAAS,CACZP,MAAOK,EAAYI,OACnBV,QAAS,yBAGX,IAAK,IAAIW,EAAIN,EAAMK,OAAS,EAAGC,EAAI,EAAGA,IAAK,CACzC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADC,EAElB,CAACN,EAAMO,GAAIP,EAAMM,IAAvCN,EAAMM,GAFkC,KAE9BN,EAAMO,GAFwB,WAbzC,EAAKJ,SAAS,CACZP,MAAO,GACPD,QAAS,+BACTM,YAAa,M,wEAqBT,IAAD,OACP,OACE,oCAEE,kBAAC,EAAD,CACAL,MAAOe,KAAKZ,MAAMH,MAClBC,SAAUc,KAAKZ,MAAMF,SACrBF,QAASgB,KAAKZ,MAAMJ,UAGpB,kBAAC,EAAD,MAEA,yBAAKT,UAAU,OACZyB,KAAKZ,MAAMC,MAAMY,KAAI,SAAAZ,GAAK,OACzB,kBAAC,EAAD,CAEEZ,aAAc,EAAKA,aACnBC,GAAIW,EAAMX,GACVG,MAAOQ,EAAMR,iB,GArEPqB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.934d6fbc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"img-container\" onClick={() => props.herosClicked(props.id)}>\r\n                <img className = \"heroImg\" alt={props.id} src={props.image} />\r\n               \r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n};\r\nexport default Wrapper;","import React from 'react';\r\nimport './Headline.css'\r\nfunction Headline() {\r\n    return(\r\n        // <header className = \"header\">\r\n            <div className = \"jumbotron\">\r\n                <h1 className=\"Title-text\">Welcome to the Clicky Game</h1>\r\n            </div>\r\n        // </header>\r\n\r\n\r\n    )\r\n};\r\n\r\nexport default Headline;","import React from \"react\";\r\nimport \"./Score.css\";\r\n\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <div>\r\n            <nav className='nav'>\r\n                <h2 className='navBar-title'>Clicky Game</h2>\r\n                <h2 className='navBar-begin'> {props.message} </h2>\r\n                <h2 className='navBar-score'>Score: {props.score} | Top Score: {props.topScore}</h2>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Score;","import React, { Component } from 'react';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport Headline from './components/Headline/Headline';\nimport heros from './Heros.json';\nimport Score from './components/Score/Score';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    heros,\n    score: 0,\n    topScore: 12,\n    herosChosen: [],\n    message: \"Click image to begin\"\n\n\n  };\n\n  herosClicked = id => {\n    let herosChosen = this.state.herosChosen\n    if (herosChosen.includes(id)) {\n    this.setState({\n      herosChosen: [],\n      score: 0,\n      message: \"You lost! Click again to play\"\n\n    });\n    return;\n  }\n     else {\n  herosChosen.push(id);\n\n  if (herosChosen.length === 12) {\n    this.setState({\n      score: 12,\n      message: \"Winner! Click to play again!\",\n      herosChosen: []\n    });\n    return;\n\n  }\n  this.setState({\n    score: herosChosen.length,\n    message: \"You Guessed correct!\",\n  });\n\n  for (let i = heros.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [heros[i], heros[j]] = [heros[j], heros[i]];\n  }\n\n}\n     \n}\n\n\n\nrender() {\n  return (\n    <>\n\n      <Score \n      score={this.state.score}\n      topScore={this.state.topScore}\n      message={this.state.message}\n      \n      />\n      <Headline />\n\n      <div className=\"row\">\n        {this.state.heros.map(heros => (\n          <Wrapper\n          \n            herosClicked={this.herosClicked}\n            id={heros.id}\n            image={heros.image}\n          />\n\n\n        ))}\n      </div>\n    </>\n  );\n\n}\n};\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}